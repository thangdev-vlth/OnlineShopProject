// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data.EF;

namespace Project.WebApp.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    partial class ProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");

                    b.HasData(
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = 1
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductsId = 1
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = -2
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = -1
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductsId = -1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "8D04DCE3-969A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "14d65359-35b5-4519-9e4b-9542e95f2a48",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8D04DCE2-969A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "511f3090-48e5-47d9-a5be-d5f8b9748c1e",
                            Name = "editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "8D04DCC2-969A-435D-BBA4-DF3F315983DC",
                            ConcurrencyStamp = "d1a517c5-7138-4f45-acda-664d4a4138b6",
                            Name = "customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "1D04DCC2-969A-435D-BBA4-DF3F315983DC",
                            ConcurrencyStamp = "4fcdf222-a6c6-4354-93b3-1f117972bb56",
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClaimType = "permission",
                            ClaimValue = "manage.user",
                            RoleId = "8D04DCE3-969A-435D-BBA4-DF3F325983DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE01DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE02DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE03DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE04DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE05DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE06DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE07DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE08DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE09DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9516-45BA-B5B7-F00649BE01DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9526-45BA-B5B7-F00649BE02DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9536-45BA-B5B7-F00649BE03DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9546-45BA-B5B7-F00649BE04DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9556-45BA-B5B7-F00649BE05DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9566-45BA-B5B7-F00649BE06DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9576-45BA-B5B7-F00649BE07DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9586-45BA-B5B7-F00649BE08DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9596-45BA-B5B7-F00649BE09DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCE3-969A-435D-BBA4-DF3F325983DC"
                        },
                        new
                        {
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCE2-969A-435D-BBA4-DF3F325983DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastSignIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 5, 24, 22, 13, 28, 81, DateTimeKind.Local).AddTicks(9907));

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("disable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 125, DateTimeKind.Local).AddTicks(1016),
                            ConcurrencyStamp = "76a6b815-d331-4a74-9969-816fcc1d7bfe",
                            Email = "rawaccountcustomer0@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer0@gmail.com",
                            NormalizedUserName = "raw-account-customer0",
                            PasswordHash = "AQAAAAEAACcQAAAAECvDdSLkaOHRbafetAiBNUuSqLFBpwFbuKuYhu/K9hJuvMPgZQOW/zqM50ZZH3mDEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer0",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 133, DateTimeKind.Local).AddTicks(5017),
                            ConcurrencyStamp = "a7026117-50d8-473f-a776-32ceeb190b5f",
                            Email = "rawaccountcustomer1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer1@gmail.com",
                            NormalizedUserName = "raw-account-customer1",
                            PasswordHash = "AQAAAAEAACcQAAAAECdczCdHCkSjuW+DXkSMnXuO+aQ0g4r/dXbBuvsjd8K07jCLK+7d/Cs37kLQKt7EIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer1",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE02DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 141, DateTimeKind.Local).AddTicks(4314),
                            ConcurrencyStamp = "a31b9ea2-3837-4106-8af1-22943d926760",
                            Email = "rawaccountcustomer2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer2@gmail.com",
                            NormalizedUserName = "raw-account-customer2",
                            PasswordHash = "AQAAAAEAACcQAAAAEJSoHQdsPrqaok9OP7XIIA73JUWnm6TjB2SmYxWoxP5Cs4vm8+QQ3dBC6i0+xRUolg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer2",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE03DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 150, DateTimeKind.Local).AddTicks(1529),
                            ConcurrencyStamp = "a0ba2c3f-a60b-4c51-ac4a-1e833813077c",
                            Email = "rawaccountcustomer3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer3@gmail.com",
                            NormalizedUserName = "raw-account-customer3",
                            PasswordHash = "AQAAAAEAACcQAAAAEKuIVXRczWk0pcu4l3ahW4ARXIxZRJGlTNlglgjKNiLN3LuRM4+0vNszR8CckvUEjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer3",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 158, DateTimeKind.Local).AddTicks(5099),
                            ConcurrencyStamp = "3dd19b8c-df5f-496a-83b4-c710b009dcec",
                            Email = "rawaccountcustomer4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer4@gmail.com",
                            NormalizedUserName = "raw-account-customer4",
                            PasswordHash = "AQAAAAEAACcQAAAAENcWtQvNspJcXnyuLCg5VK9NT2TKCbj78jPP/EDiLl5jKIIB1jSpk3yhDwFxBVyn+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer4",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE05DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 168, DateTimeKind.Local).AddTicks(8325),
                            ConcurrencyStamp = "ed3f05be-0654-4e5f-a756-6857e296ba44",
                            Email = "rawaccountcustomer5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer5@gmail.com",
                            NormalizedUserName = "raw-account-customer5",
                            PasswordHash = "AQAAAAEAACcQAAAAEHdZlVZezvUl5FY+zm6CJenHdEjBtXX75pTVcoXi78OKXSMdUz75ZiXiRBw3Ysi2Qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer5",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE06DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 176, DateTimeKind.Local).AddTicks(6382),
                            ConcurrencyStamp = "456e4e62-c45f-4899-a9a5-8201d30528c6",
                            Email = "rawaccountcustomer6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer6@gmail.com",
                            NormalizedUserName = "raw-account-customer6",
                            PasswordHash = "AQAAAAEAACcQAAAAENsNdJBrjCJnGACYtT6nIBTEo/MLwlD/Dz4OtyzlL97Mat8KVCBl+m5XjCIFIqFKcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer6",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE07DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 184, DateTimeKind.Local).AddTicks(6672),
                            ConcurrencyStamp = "47831caf-9641-4c08-a9dd-c0d38c9cf868",
                            Email = "rawaccountcustomer7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer7@gmail.com",
                            NormalizedUserName = "raw-account-customer7",
                            PasswordHash = "AQAAAAEAACcQAAAAEHizKOqZMb9c7WBx8N/iBI4mrYl1WwQrqKTNd5An9mscmfTPI6APesdWonybx4ezAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer7",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE08DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 192, DateTimeKind.Local).AddTicks(5928),
                            ConcurrencyStamp = "25c246da-d4ef-455b-b229-31355464294c",
                            Email = "rawaccountcustomer8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer8@gmail.com",
                            NormalizedUserName = "raw-account-customer8",
                            PasswordHash = "AQAAAAEAACcQAAAAEADiVCpy6ujyMLjdt5LqH0Gqxpxw9pgQOncIHvEmS7poyKlZflhkrJoQ8zoNQWkDeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer8",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE09DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 200, DateTimeKind.Local).AddTicks(8429),
                            ConcurrencyStamp = "5cceda97-bb30-415e-9fb9-315a2ad6c33a",
                            Email = "rawaccountcustomer9@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer9@gmail.com",
                            NormalizedUserName = "raw-account-customer9",
                            PasswordHash = "AQAAAAEAACcQAAAAEFQn+CUd0Ho2gDe6B1HsCztsAKrClWeRO/lTJ4ur1+zHrSJf7Il38+owGN67igg5QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer9",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 208, DateTimeKind.Local).AddTicks(9192),
                            ConcurrencyStamp = "0a877671-4f01-4b31-a6fc-a57c237cbc14",
                            Email = "rawaccountstaff0@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff0@gmail.com",
                            NormalizedUserName = "raw-account-staff0",
                            PasswordHash = "AQAAAAEAACcQAAAAEIoj1zOL6EBJ2QT1KPgHgdKbM/BodeVaP+MtiTjqVHtWD6u/DS+Vb6Gz9FrXqZDiZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff0",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9516-45BA-B5B7-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 216, DateTimeKind.Local).AddTicks(8438),
                            ConcurrencyStamp = "ca95af3a-0f0c-47fa-a880-804a490d37bc",
                            Email = "rawaccountstaff1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff1@gmail.com",
                            NormalizedUserName = "raw-account-staff1",
                            PasswordHash = "AQAAAAEAACcQAAAAENZfFjpCzu1bwLyQNOLDxjX2B1LJbrwl1F4oPqLvwyDk0OWp6dq0LNa4x3vzeYAz9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff1",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9526-45BA-B5B7-F00649BE02DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 224, DateTimeKind.Local).AddTicks(6173),
                            ConcurrencyStamp = "a74e0765-f93e-428e-8906-4abdcb8c16e4",
                            Email = "rawaccountstaff2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff2@gmail.com",
                            NormalizedUserName = "raw-account-staff2",
                            PasswordHash = "AQAAAAEAACcQAAAAEGnSRo3DrgU0+cHH7OnLgIDr5rx6jmhmYtKIkC166r1FHRiefo2MKdGS2LCMN7cpgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff2",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9536-45BA-B5B7-F00649BE03DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 232, DateTimeKind.Local).AddTicks(5089),
                            ConcurrencyStamp = "008887fd-b090-4c48-bc1a-36ac96f43320",
                            Email = "rawaccountstaff3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff3@gmail.com",
                            NormalizedUserName = "raw-account-staff3",
                            PasswordHash = "AQAAAAEAACcQAAAAEFIjLmzEyW5fTg8P4Omej7SEsFUUoKs9NhEdy3f0EKrqqH5fMt5TUg3723O4KtYL5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff3",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9546-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 240, DateTimeKind.Local).AddTicks(8172),
                            ConcurrencyStamp = "b2163bc2-0b84-488a-9f58-c4bf268259b9",
                            Email = "rawaccountstaff4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff4@gmail.com",
                            NormalizedUserName = "raw-account-staff4",
                            PasswordHash = "AQAAAAEAACcQAAAAEI2PTzDxIWeD8hZOFXLlE7/nnV8m6tI0t+XBNsmC7fWS9FuLn0aqY7PuSWQT5ulU4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff4",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9556-45BA-B5B7-F00649BE05DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 248, DateTimeKind.Local).AddTicks(9916),
                            ConcurrencyStamp = "e6132a14-29ce-4f02-b12e-b33b82381034",
                            Email = "rawaccountstaff5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff5@gmail.com",
                            NormalizedUserName = "raw-account-staff5",
                            PasswordHash = "AQAAAAEAACcQAAAAEH/7rwgRPTv7HsZPoPWVBMSlbocuMIsl5bLlEhM5i5u+B71g4xBObH24i6GwrIGZNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff5",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9566-45BA-B5B7-F00649BE06DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 257, DateTimeKind.Local).AddTicks(1209),
                            ConcurrencyStamp = "e7f2fbe2-c1c5-411a-b6b1-f837db654a22",
                            Email = "rawaccountstaff6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff6@gmail.com",
                            NormalizedUserName = "raw-account-staff6",
                            PasswordHash = "AQAAAAEAACcQAAAAEGUGJfBUkE/uWrWLF5g9jJc196WJgretg9s/sD0Q2zmzclbUrc/wKkx077buZb52tQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff6",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9576-45BA-B5B7-F00649BE07DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 265, DateTimeKind.Local).AddTicks(612),
                            ConcurrencyStamp = "d575db21-f793-48d5-a415-8b2c9f06241a",
                            Email = "rawaccountstaff7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff7@gmail.com",
                            NormalizedUserName = "raw-account-staff7",
                            PasswordHash = "AQAAAAEAACcQAAAAEFdLUh+sDfiRiHV0VsZZ+d76RryG8BcWbC5ErZCAWCOAyX/DteNr4TEaISVz15ciFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff7",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9586-45BA-B5B7-F00649BE08DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 273, DateTimeKind.Local).AddTicks(4211),
                            ConcurrencyStamp = "18177b89-3032-4dab-ba2d-e52760b1face",
                            Email = "rawaccountstaff8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff8@gmail.com",
                            NormalizedUserName = "raw-account-staff8",
                            PasswordHash = "AQAAAAEAACcQAAAAEOezcRhCTorhJVlggNMIBE1/L1w0U19a6EmnyP62nhzszTbAoVGMVoOzw0zOzB+M2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff8",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9596-45BA-B5B7-F00649BE09DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 281, DateTimeKind.Local).AddTicks(3821),
                            ConcurrencyStamp = "c14e768b-8666-4f62-b0a7-30d0e8b83d34",
                            Email = "rawaccountstaff9@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff9@gmail.com",
                            NormalizedUserName = "raw-account-staff9",
                            PasswordHash = "AQAAAAEAACcQAAAAEAot9j7m4Zuf5vSRPpxZwO7bLybP41auKJ4YqM82+GdeqkpVG2cr9H8hm+/OwDe+Mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff9",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 289, DateTimeKind.Local).AddTicks(4227),
                            ConcurrencyStamp = "a0a257ae-d777-483e-b10c-9f9c583d880c",
                            Email = "thangnguyenquyetvlth@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAELgZC7403KLOKwTNFSWTMsqJB6/j9jqKxsKdpAuLbK2R8MEPLUEv0f4J1uPhQ4XuNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Thang-dev",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD711F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 297, DateTimeKind.Local).AddTicks(2377),
                            ConcurrencyStamp = "acfc1108-b838-4951-9172-a210572d132c",
                            Email = "thangnguyenquyetvlth1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth1@gmail.com",
                            NormalizedUserName = "raw-account1",
                            PasswordHash = "AQAAAAEAACcQAAAAEO02eM54FnwI1wWAa+stRhZhnv0WTwsUwSRcfqpxSmzZt8e3MZd9sxu00Ct9ATEYyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account1",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD712F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 305, DateTimeKind.Local).AddTicks(3609),
                            ConcurrencyStamp = "4e4129e7-050c-4ada-a2bf-3b631234d1a9",
                            Email = "thangnguyenquyetvlth2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth2@gmail.com",
                            NormalizedUserName = "raw-account2",
                            PasswordHash = "AQAAAAEAACcQAAAAEJoN+pA5oxvC6d0mF4hWQS3DVaoff/fkhnd7OgQ25i9bzOmPFZoHWaGxO0KxYYr8/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account2",
                            disable = false
                        },
                        new
                        {
                            Id = "61BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 313, DateTimeKind.Local).AddTicks(2613),
                            ConcurrencyStamp = "f9dbd18e-827b-4ac8-90d6-7ae88d8bb08c",
                            Email = "thangnguyenquyetvlth3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth3@gmail.com",
                            NormalizedUserName = "raw-account3",
                            PasswordHash = "AQAAAAEAACcQAAAAEJQFtgPPZXWwWnP/1wMkPres2X/pXEsS7m/NRdhLnkK1HitKYnqqlHSv7E5hRUqyHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account3",
                            disable = false
                        },
                        new
                        {
                            Id = "19BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 321, DateTimeKind.Local).AddTicks(6329),
                            ConcurrencyStamp = "c2f794df-84d9-4ed0-ae3e-6d14f72ae514",
                            Email = "thangnguyenquyetvlth4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth4@gmail.com",
                            NormalizedUserName = "raw-account4",
                            PasswordHash = "AQAAAAEAACcQAAAAEKZX0SpYLGWsNz4iJXDnaXmymcSDu6aouzEibB0dsXN49KHdizQvo7/2XYCoLZBfwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account4",
                            disable = false
                        },
                        new
                        {
                            Id = "65BD710F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 329, DateTimeKind.Local).AddTicks(4639),
                            ConcurrencyStamp = "d300fd17-438e-4c9c-a774-67fcca12fda6",
                            Email = "thangnguyenquyetvlth5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth5@gmail.com",
                            NormalizedUserName = "raw-account5",
                            PasswordHash = "AQAAAAEAACcQAAAAEB6EEFLlPH+F9xoJcd7V4HfXVD7e4qWojtmB2eltVwPpDhPrzHvguBzdhVSAN8O1EQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account5",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD714F-9576-45BA-B5B6-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 337, DateTimeKind.Local).AddTicks(5328),
                            ConcurrencyStamp = "bbceb7e5-8a8e-45d6-9582-3618c0748376",
                            Email = "thangnguyenquyetvlth6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth6@gmail.com",
                            NormalizedUserName = "raw-account6",
                            PasswordHash = "AQAAAAEAACcQAAAAEKHYUGNjFtyv3zvpklLMYyNEDEn2ITbf/n4ya30aHH93K3y/+qJw6MUR3Gg1crzG7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account6",
                            disable = false
                        },
                        new
                        {
                            Id = "09BD714F-9576-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 345, DateTimeKind.Local).AddTicks(6574),
                            ConcurrencyStamp = "6c5bee3e-2bad-4bd0-9681-0314d5d3a68c",
                            Email = "thangnguyenquyetvlth7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth7@gmail.com",
                            NormalizedUserName = "raw-account7",
                            PasswordHash = "AQAAAAEAACcQAAAAELdU2QUILvJDVP3Gb+BfZfMxB+0BGfRxMjYwuAwsDehBjc2PDULLTqLygAWhh0aSLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account7",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD114F-9576-45BA-B4B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 24, 22, 13, 28, 356, DateTimeKind.Local).AddTicks(3691),
                            ConcurrencyStamp = "ff1bd513-c022-4276-b343-2215495b048e",
                            Email = "thangnguyenquyetvlth8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth8@gmail.com",
                            NormalizedUserName = "raw-account8",
                            PasswordHash = "AQAAAAEAACcQAAAAEK0R4cZgsO4Y4TdPCpFXVhH22wGOQn82kSiN/+pESsq2KasNQYjjYIUmPKxAWL8DuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account8",
                            disable = false
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id", "ProductId", "UserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = -2,
                            UserId = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            DateCreated = new DateTime(2021, 5, 24, 22, 13, 28, 357, DateTimeKind.Local).AddTicks(162),
                            Price = 20000m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 1,
                            ProductId = -1,
                            UserId = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            DateCreated = new DateTime(2021, 5, 24, 22, 13, 28, 357, DateTimeKind.Local).AddTicks(752),
                            Price = 20000m,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = true,
                            Name = "Áo nữ",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = true,
                            Name = "Áo nam",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = false,
                            Name = "Áo nam",
                            SortOrder = 3,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("productStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("sold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 5, 24, 22, 13, 28, 111, DateTimeKind.Local).AddTicks(6037),
                            Description = "99% Cotton, 1% Elastane . Bền Vững Khi Giặt Máy . Skinny Ôm Sát Và Tôn Lên Những Đường Nét Quyến Rũ Của Bạn",
                            IsFeatured = true,
                            Name = "SKINNY",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            productStatus = 0,
                            sold = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 5, 24, 22, 13, 28, 112, DateTimeKind.Local).AddTicks(245),
                            Description = "100% Cotton . Sản Phẩm Mang Đậm Phong Cách Cá Tính Và Không Kém Phần Quyến Rũ. Orginal Được Thiết Kế Để Có Thể Ôm Sát Vòng Ba Và Tôn Lên Làn Da Của Bạn",
                            IsFeatured = true,
                            Name = "ORGINAL SHORT",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            productStatus = 0,
                            sold = 0
                        },
                        new
                        {
                            Id = -1,
                            DateCreated = new DateTime(2021, 5, 24, 22, 13, 28, 112, DateTimeKind.Local).AddTicks(253),
                            Description = "100% Cotton . TOPS Với Thiết Kế Cạp Cao Sẽ Mang Lại Cho Bạn Cảm Giác Tự tin , Thích Hợp Để Phối Với Những Dạng Áo ONTOP cá tính",
                            IsFeatured = true,
                            Name = "TOPS",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            productStatus = 0,
                            sold = 0
                        },
                        new
                        {
                            Id = -2,
                            DateCreated = new DateTime(2021, 5, 24, 22, 13, 28, 112, DateTimeKind.Local).AddTicks(256),
                            Description = "Vâng , Đúng Như Cái Tên Của Nó, BoyFriend Sẽ Là Người Bạn Đồng Hành Của Bạn Trong Mọi Thời Điểm Của Cuộc Sống, BOYFRIEND Được Thiết Kết Để Tạo Cho Bạn Cảm Giác Thoải Mái, Sang Trọng Và An Toàn",
                            IsFeatured = true,
                            Name = "BOYFRIEND",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            productStatus = 0,
                            sold = 0
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Project.Data.Entities.Reviews", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("review")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("Project.Data.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Data.Entities.Cart", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("Project.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.Reviews", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.Data.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
